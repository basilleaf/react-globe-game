class Gallery extends React.Component {
  /* gallery of globe images is the matching game board */
  constructor(props) {
    super(props);
    this.state = {
      display: true,
      clicked: Array(),
      finished: Array(),
      imageUrls: Array(),
      boardKeys: Array(),
      remainingLinks: Array(),
      isUsingKeyboardNav: false,
      focusStyle: "mouse"
    };
  }
  componentDidMount() {
    this.setState({ imageUrls: this.getGameBoardUrls(allLinks) });
    window.addEventListener("keyup", this.handleKeyUp.bind(this));
  }

  getGameBoardUrls(links) {
    /* the gameboard presents a random
       subset of the available images from data.json,
       based on available screen size */
    links = shuffle(links); // the big list of all links
    let imageLinks = shuffle(
      links
        .slice(0, uniqueGlobesCount)
        .concat(links.slice(0, uniqueGlobesCount))
    );
    this.setState({ boardKeys: imageLinks }); // help for arrow key navigation

    let remainingLinks = links.filter(x => !imageLinks.includes(x));

    // don't repeat images between games until there are no more,
    // then start over with allLinks again..
    remainingLinks =
      remainingLinks.length < uniqueGlobesCount ? allLinks : remainingLinks;

    this.setState({ remainingLinks: remainingLinks });
    return imageLinks.map(lnk => baseUrl + lnk);
  }

  moveFocus(parentEl, direction) {
    // moves focus from parentEl to next available globe
    // el is the <li> element
    // direction = next/prev (or right/left arrow key)

    // find the appropriate next sibling (before or after this one)
    var siblingContainer =
      direction == "next" ? parentEl.nextSibling : parentEl.previousSibling;

    try {
      var siblingKey = siblingContainer.getAttribute("data-key");
      if (this.state.finished.includes(siblingKey)) {
        // this globe is hidden, move to next available sibling
        return this.moveFocus(siblingContainer, direction);
      }
      // this is available, focus this element
      siblingContainer.focus();
    } catch (e) {
      // this happens on the begnning and end of the list of globes
      // the arrow keys have a wraparound behavior
      var currentKey =
        parentEl.getAttribute("data-key").split(".jpg")[0] + ".jpg";
      let boardKeys = this.state.boardKeys;
      if ((currentKey == boardKeys[0]) & (direction == "prev")) {
        // they hit left arrow while on the first globe
        // bring focus to last globe
        document.getElementById("images").lastChild.focus();
        // they are at the beginning of the list, send them to the end
      }
      if (
        (currentKey == boardKeys[boardKeys.length - 1]) &
        (direction == "next")
      ) {
        // they hit right arrow while on the last globe,
        // bring focus to first globe
        document.getElementById("images").firstChild.focus();
      }
    }
  }

  handleKeyDown(e) {
    // for navigating with arrow key
    if (!e.key | !["ArrowRight", "ArrowLeft"].includes(e.key)) {
      return;
    }
    let parentEl = e.target; // the enclosing <li>
    var direction = e.key == "ArrowLeft" ? "prev" : "next";

    this.moveFocus(parentEl, direction);
  }

  handleGlobeClick(key, e) {
    if (!e.key) {
      // they switched back to using clicks/taps
      if (this.state.focusStyle == "keyboard") {
        this.setState({ focusStyle: "mouse" });
      }
    }
    /* a globe was clicked */
    if (e.key & ![" ", "Enter"].includes(e.key)) {
      return; // this was not an enter or spacebar click
    }
    if (this.state.finished.includes(key)) {
      return; // prevents clicking in the space of a removed globe
    }
    let clicked = this.state.clicked.slice();
    if (clicked[0] == key) {
      // they clicked the same box again, unset it
      this.setState({ clicked: Array() });
      return;
    }
    // this is a legit clicked thing..
    clicked.push(key);
    this.setState({ clicked: clicked });
    if (clicked.length == 2) {
      let el = e.target;
      // a pair has been selected..
      // setTimeout allows 2nd clicked globe style to render
      setTimeout(() => {
        this.handlePairIsSelected(clicked, el);
      }, 300);
    }
  }

  handlePairIsSelected(clicked, el) {
    // el is the last dom element clicked

    /* player selected a pair, check for matching
       and handle match game play behavior */

    // image names are found in the file name, but the extensions may differ
    // (an index is appended to make them unique on the board as "key")
    let imageNames = this.state.clicked.map(x => x.split(".jpg")[0]);

    this.setState({ clicked: Array() });

    if (imageNames[0] !== imageNames[1]) {
      return; // these do not match
    }

    // we have a match, update the finished list..
    let finished = this.state.finished.slice().concat(clicked);
    this.setState({ finished: finished }, () => {
      // move focus to the next dom element for keyboard nav users
      if (this.state.isUsingKeyboardNav) {
        this.moveFocus(el, "next");
      }
    });

    if (finished.length == 2 * uniqueGlobesCount) {
      this.setState({ display: false });
      // there are no more globes to match! ask user to play again..
      setTimeout(() => {
        this.renderMessageScreen(true, "good job!", "play again");
      }, 200);
    }
  }

  handleKeyUp(e) {
    // they may be trying to navigate with keyboard..
    if (e.key != "Tab") {
      return; // no
    }
    if (!this.state.isUsingKeyboardNav) {
      this.setState({ isUsingKeyboardNav: true });
    }
    if (this.state.focusStyle == "mouse") {
      this.setState({ focusStyle: "keyboard" });
    }
  }

  handlePlayAgain() {
    /* "play again" button handler */
    this.setState({ finished: Array() });
    this.setState({
      imageUrls: this.getGameBoardUrls(this.state.remainingLinks)
    });
    this.setState({ display: true });
    this.renderMessageScreen(false, "", "");
  }

  getGlobeStyle(key) {
    return this.state.clicked.includes(key)
      ? clickedStyles.clicked
      : clickedStyles.default;
  }
  getFinishedStyle(key) {
    if (this.state.finished.includes(key)) {
      return finishedStyles.finished;
    }
  }

  renderMessageScreen(display, msg, btnMsg) {
    ReactDOM.render(
      <MessageScreen
        display={display}
        msg={msg}
        btnMsg={btnMsg}
        handleRestart={() => {
          this.handlePlayAgain();
        }}
      />,
      document.getElementById("msg")
    );
  }

  renderGlobe(imageUrl, index) {
    const key = imageUrl.split("/").pop() + String(index); // unique key

    return (
      <li
        key={key}
        tabIndex={0}
        data-key={key}
        style={this.getGlobeStyle(key)}
        className={this.state.focusStyle}
        onClick={e => this.handleGlobeClick(key, e)}
        onKeyPress={e => this.handleGlobeClick(key, e)}
        onKeyDown={e => this.handleKeyDown(e)}
      >
        <section style={this.getFinishedStyle(key)} className="stage">
          <figure
            title={key}
            role="group"
            aria-labelledby={key}
            className="ball"
            style={{ background: "url('" + imageUrl + "') repeat-x center" }}
          >
            <span className="shadow" />
          </figure>
        </section>
      </li>
    );
  }

  render() {
    if (!this.state.display) {
      return null;
    }
    return (
      <div className="gallery">
        <ul id="images" className="images">
          {this.state.imageUrls.map((imageUrl, index) =>
            this.renderGlobe(imageUrl, index)
          )}
        </ul>
      </div>
    );
  }
}
