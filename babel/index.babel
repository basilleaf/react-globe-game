const baseUrl = "https://s3-us-west-1.amazonaws.com/marsfromspace.com/";

var clickedStyles = {
  clicked: {
    border: "1px solid white"
  },
  default: {
    border: "1px solid black"
  }
};

var finishedStyles = {
  finished: {
    display: "none"
  }
};

class Gallery extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      clickedPair: Array(),
      finished: Array(),
      imageUrls: getGameBoardUrls(allLinks)
    };
  }

  startOver() {
    this.setState({ finished: Array() });
    this.setState({ imageUrls: getGameBoardUrls(allLinks) });
    this.renderStartOver(false, "", "");
  }

  clickIndicatorClassName(key) {
    return this.state.clickedPair.includes(key)
      ? clickedStyles.clicked
      : clickedStyles.default;
  }
  finishedIndicatorClassName(key) {
    if (this.state.finished.includes(key)) {
      return finishedStyles.finished;
    }
  }

  clickHandler(key) {
    if (this.state.finished.includes(key)) {
      return;
    }
    let clickedPair = this.state.clickedPair.slice();

    if (clickedPair[0] == key) {
      // they clicked the same box again, unset it
      this.setState({ clickedPair: Array() });
      return;
    }

    clickedPair.push(key);
    this.setState({ clickedPair: clickedPair });

    if (clickedPair.length == 2) {
      // setTimeout gets the 2nd clicked globe style to render
      setTimeout(() => this.checkMatch(clickedPair), 300);
    }
  }

  checkMatch(clickedPair) {
    let imageNames = this.state.clickedPair.map(x => x.split(".jpg")[0]);
    this.setState({ clickedPair: Array() }); // resets clicked pair highlighting

    if (imageNames[0] !== imageNames[1]) {
      return; // these do not match
    }

    // we have a match..
    let finished = this.state.finished.slice().concat(clickedPair);
    this.setState({ finished: finished });

    if (finished.length == 2 * uniqueGlobesCount) {
      // all matches on the board have been found
      setTimeout(() => {
        this.renderStartOver(true, "good job!", "play again");
      }, 200);
    }
  }

  renderStartOver(display, msg, btnMsg) {
    ReactDOM.render(
      <MessageScreen
        display={display}
        msg={msg}
        btnMsg={btnMsg}
        restartHandler={() => {
          this.startOver();
        }}
      />,
      document.getElementById("msg")
    );
  }

  renderGlobe(imageUrl, index) {
    const key = imageUrl.split("/").pop() + String(index); // unique key

    return (
      <li
        key={key}
        style={this.clickIndicatorClassName(key)}
        onClick={() => this.clickHandler(key)}
      >
        <section style={this.finishedIndicatorClassName(key)} className="stage">
          <figure
            className="ball"
            style={{ background: "url('" + imageUrl + "') repeat-x" }}
          >
            <span className="shadow" />
          </figure>
        </section>
      </li>
    );
  }

  render() {
    return (
      <div className="gallery">
        <ul className="images">
          {this.state.imageUrls.map((imageUrl, index) =>
            this.renderGlobe(imageUrl, index)
          )}
        </ul>
      </div>
    );
  }
}

class MessageScreen extends React.Component {
  render() {
    var styleName = this.props.display ? "block" : "none";
    return (
      <div className="win" style={{ display: styleName }}>
        <h2>{this.props.msg}</h2>
        <button onClick={this.props.restartHandler}>{this.props.btnMsg}</button>
      </div>
    );
  }
}

function getGlobesCount() {
  // try to fill the page
  var globeSize = convertRemToPixels(9); // css .ball width/height
  var w = window.innerWidth;
  var h = window.innerHeight;
  var colCount = Math.floor(w / (1.1 * globeSize)); // multiplier is just a guess
  var rowCount = Math.floor(h / (1.1 * globeSize)); // to account for padding

  return Math.floor(colCount * rowCount / 2);
}

function getGameBoardUrls(allLinks) {
  allLinks = shuffle(allLinks);
  let imageLinks = allLinks
    .slice(0, uniqueGlobesCount)
    .concat(allLinks.slice(0, uniqueGlobesCount));
  return imageLinks.map(lnk => baseUrl + lnk.src.split("/").pop());
}

function startGame() {
  ReactDOM.render(
    <MessageScreen display={false} />,
    document.getElementById("msg")
  );

  ReactDOM.render(
    <Gallery imageUrls={allLinks} />,
    document.getElementById("root")
  );
}

// ready go
const uniqueGlobesCount = getGlobesCount(); // number of unique globes, this will be times 2 for match game

// grab all links from server-rendered html and remove from dom
var allLinks = Array.prototype.slice.call(document.getElementsByTagName("img"));
document.getElementById("prerendered").remove();

const welcomeMsg =
  "Welcome! This is a visual matching game. Click on the pairs of matching globes.";

ReactDOM.render(
  <MessageScreen
    display={true}
    msg={welcomeMsg}
    btnMsg="Start Game"
    restartHandler={() => {
      startGame();
    }}
  />,
  document.getElementById("msg")
);
