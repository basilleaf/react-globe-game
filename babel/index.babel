import allLinks from "../data.json";
const baseUrl = "https://s3-us-west-1.amazonaws.com/marsfromspace.com/";

const welcomeMsg =
  "Welcome! This is a visual matching game. Click on the pairs of matching globes.";

/* globe behavior styles */
var clickedStyles = {
  clicked: {
    border: "3px solid #525C65"
  },
  default: {
    border: "3px solid black"
  }
};
var finishedStyles = {
  finished: {
    display: "none"
  }
};

/* components */
class MessageScreen extends React.Component {
  /* interstitial screen for welcome and between games */
  render() {
    if (!this.props.display) {
      return null;
    }
    var styleName = this.props.display ? "block" : "none";
    return (
      <div className="win"
        <h2>{this.props.msg}</h2>
        <button onClick={this.props.restartHandler}>{this.props.btnMsg}</button>
      </div>
    );
  }
}

class Gallery extends React.Component {
  /* gallery of globe images is the matching game board */
  constructor(props) {
    super(props);
    this.state = {
      display: true,
      clicked: Array(),
      finished: Array(),
      imageUrls: Array(),
      remainingLinks: Array(),
      isUsingKeyboardNav: false,
      focusStyle: "mouse"
    };
  }
  componentDidMount() {
    this.setState({ imageUrls: this.getGameBoardUrls(allLinks) });
    window.addEventListener("keyup", this.handleKeyUp.bind(this));
  }

  getGameBoardUrls(links) {
    /* the gameboard presents a random
       subset of the available images from data.json,
       based on available screen size */
    links = shuffle(links);
    let imageLinks = shuffle(
      links
        .slice(0, uniqueGlobesCount)
        .concat(links.slice(0, uniqueGlobesCount))
    );
    let remainingLinks = links.filter(x => !imageLinks.includes(x));

    // don't repeat images between games until there are no more,
    // then start over with allLinks again..
    remainingLinks =
      remainingLinks.length < uniqueGlobesCount ? allLinks : remainingLinks;

    this.setState({ remainingLinks: remainingLinks });
    return imageLinks.map(lnk => baseUrl + lnk);
  }

  globeClickHandler(key, e) {
    if (!e.key) {
      // they switched back to using clicks/taps
      if (this.state.focusStyle == "keyboard") {
        this.setState({ focusStyle: "mouse" });
      }
    }
    /* a globe was clicked */
    if (e.key & ![" ", "Enter"].includes(e.key)) {
      return; // this was not an enter or spacebar click
    }
    if (this.state.finished.includes(key)) {
      return; // prevents clicking in the space of a removed globe
    }
    let clicked = this.state.clicked.slice();
    if (clicked[0] == key) {
      // they clicked the same box again, unset it
      this.setState({ clicked: Array() });
      return;
    }
    // this is a legit clicked thing..
    clicked.push(key);
    this.setState({ clicked: clicked });
    if (clicked.length == 2) {
      // a pair has been selected..
      // setTimeout allows 2nd clicked globe style to render
      setTimeout(() => this.pairHandler(clicked), 300);
    }
  }

  pairHandler(clicked) {
    /* player selected a pair, check for matching
       and handle match game play behavior */

    // image names are found in the file name, but the extensions may differ
    // (an index is appended to make them unique on the board as "key")
    let imageNames = this.state.clicked.map(x => x.split(".jpg")[0]);

    this.setState({ clicked: Array() });

    if (imageNames[0] !== imageNames[1]) {
      return; // these do not match
    }

    // we have a match, update the finished list..
    let finished = this.state.finished.slice().concat(clicked);
    this.setState({ finished: finished });

    if (finished.length == 2 * uniqueGlobesCount) {
      this.setState({ display: false });
      // there are no more globes to match! ask user to play again..
      setTimeout(() => {
        this.renderMessageScreen(true, "good job!", "play again");
      }, 200);
    }
  }

  handleKeyUp(e) {
    // they may be trying to navigate with keyboard..
    if (e.key != "Tab") {
      return; // no
    }

    // yes
    if (!this.state.isUsingKeyboardNav) {
      this.setState({ isUsingKeyboardNav: true });
    }

    if (this.state.focusStyle == "mouse") {
      this.setState({ focusStyle: "keyboard" });
    }
  }

  playAgainHandler() {
    /* "play again" button handler */
    this.setState({ finished: Array() });
    this.setState({
      imageUrls: this.getGameBoardUrls(this.state.remainingLinks)
    });
    this.setState({ display: true });
    this.renderMessageScreen(false, "", "");
  }

  getGlobeStyle(key) {
    return this.state.clicked.includes(key)
      ? clickedStyles.clicked
      : clickedStyles.default;
  }
  getFinishedStyle(key) {
    if (this.state.finished.includes(key)) {
      return finishedStyles.finished;
    }
  }

  renderMessageScreen(display, msg, btnMsg) {
    ReactDOM.render(
      <MessageScreen
        display={display}
        msg={msg}
        btnMsg={btnMsg}
        restartHandler={() => {
          this.playAgainHandler();
        }}
      />,
      document.getElementById("msg")
    );
  }

  renderGlobe(imageUrl, index) {
    const key = imageUrl.split("/").pop() + String(index); // unique key

    return (
      <li
        key={key}
        style={this.getGlobeStyle(key)}
        onClick={e => this.globeClickHandler(key, e)}
        onKeyPress={e => this.globeClickHandler(key, e)}
      >
        <section style={this.getFinishedStyle(key)} className="stage">
          <figure
            tabIndex={0}
            role="group"
            aria-labelledby={key}
            className={"ball " + this.state.focusStyle}
            style={{ background: "url('" + imageUrl + "') repeat-x center" }}
          >
            <span className="shadow" />
          </figure>
        </section>
      </li>
    );
  }

  render() {
    if (!this.state.display) {
      return null;
    }
    return (
      <div className="gallery">
        <ul className="images">
          {this.state.imageUrls.map((imageUrl, index) =>
            this.renderGlobe(imageUrl, index)
          )}
        </ul>
      </div>
    );
  }
}

function getGlobesCount() {
  /* tries to guess how many unique globes are needed
     to fill the screen so gallery doesn't require scrolling  */
  var w = window.innerWidth;
  var h = window.innerHeight;
  var globeSizeRem = 10; // css .ball width/height (ish) (this is janky guesswork)
  if (w < 569) {
    // iphone media query width
    globeSizeRem = 5.6; // this was tweaked and may not match globe size in scss
  }
  var globeSize = convertRemToPixels(globeSizeRem);
  var colCount = Math.floor(w / globeSize); //
  var rowCount = Math.floor(h / globeSize); //

  return Math.floor(colCount * rowCount / 2);
}

function startGame() {
  /* hide the message screen */
  ReactDOM.render(
    <MessageScreen display={false} />,
    document.getElementById("msg")
  );

  /* render the gallery  */
  ReactDOM.render(
    <Gallery imageUrls={allLinks} />,
    document.getElementById("root")
  );
}

/* ok ready go */
const uniqueGlobesCount = getGlobesCount();

ReactDOM.render(
  <MessageScreen
    display={true}
    msg={welcomeMsg}
    btnMsg="Start Game"
    restartHandler={() => {
      startGame();
    }}
  />,
  document.getElementById("msg")
);
